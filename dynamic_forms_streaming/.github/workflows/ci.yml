name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Test FastAPI endpoints
      run: |
        python -c "
        import asyncio
        from fastapi.testclient import TestClient
        from main import app
        
        client = TestClient(app)
        
        # Test main page
        response = client.get('/')
        assert response.status_code == 200
        
        # Test API endpoints
        response = client.get('/api/endpoints')
        assert response.status_code == 200
        assert len(response.json()) > 0
        
        # Test form submission
        user_data = {
            'first_name': 'Test',
            'last_name': 'User', 
            'email': 'test@example.com',
            'age': 25
        }
        response = client.post('/api/user-profile', json=user_data)
        assert response.status_code == 200
        assert response.json()['success'] == True
        
        print('✅ All tests passed!')
        "
    
    - name: Code Quality Check
      run: |
        # Check Python syntax
        python -m py_compile main.py
        echo "✅ Python syntax check passed"
    
    - name: Security Check
      run: |
        pip install bandit
        bandit -r . -f json || echo "⚠️ Security scan completed with warnings"

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort
    
    - name: Run Black formatter check
      run: |
        black --check --diff . || echo "⚠️ Code formatting issues found"
    
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff . || echo "⚠️ Import sorting issues found"
    
    - name: Run flake8 linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Linting issues found"
