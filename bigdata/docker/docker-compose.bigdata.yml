version: '3.8'

networks:
  bigdata:
    driver: bridge

volumes:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_historyserver:
  hive_metastore:
  postgres_data:
  minio_data:
  kafka_data:
  zookeeper_data:

services:
  # =========================
  # HADOOP ECOSYSTEM
  # =========================
  
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-namenode
    restart: always
    ports:
      - "9870:9870"  # Namenode Web UI
      - "8020:8020"  # Namenode RPC
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - ./data:/data
    environment:
      - CLUSTER_NAME=bigdata-cluster
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - CORE_CONF_hadoop_http_staticuser_user=root
      - CORE_CONF_hadoop_proxyuser_hue_hosts=*
      - CORE_CONF_hadoop_proxyuser_hue_groups=*
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
    networks:
      - bigdata

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-datanode1
    restart: always
    ports:
      - "9864:9864"  # Datanode Web UI
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - CORE_CONF_hadoop_http_staticuser_user=root
      - CORE_CONF_hadoop_proxyuser_hue_hosts=*
      - CORE_CONF_hadoop_proxyuser_hue_groups=*
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
    depends_on:
      - namenode
    networks:
      - bigdata

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-datanode2
    restart: always
    ports:
      - "9865:9864"  # Datanode Web UI (different port)
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - CORE_CONF_hadoop_http_staticuser_user=root
      - CORE_CONF_hadoop_proxyuser_hue_hosts=*
      - CORE_CONF_hadoop_proxyuser_hue_groups=*
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
    depends_on:
      - namenode
    networks:
      - bigdata

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-resourcemanager
    restart: always
    ports:
      - "8088:8088"  # ResourceManager Web UI
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - YARN_CONF_yarn_log___aggregation___enable=true
      - YARN_CONF_yarn_resourcemanager_recovery_enabled=true
      - YARN_CONF_yarn_resourcemanager_store_class=org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore
      - YARN_CONF_yarn_resourcemanager_fs_state___store_uri=/rmstate
      - YARN_CONF_yarn_nodemanager_remote___app___log___dir=/app-logs
      - YARN_CONF_yarn_log___server_url=http://historyserver:8188/applicationhistory/logs/
    depends_on:
      - namenode
      - datanode1
    networks:
      - bigdata

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-nodemanager
    restart: always
    ports:
      - "8042:8042"  # NodeManager Web UI
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - YARN_CONF_yarn_resourcemanager_hostname=resourcemanager
      - YARN_CONF_yarn_log___aggregation___enable=true
      - YARN_CONF_yarn_nodemanager_remote___app___log___dir=/app-logs
    depends_on:
      - resourcemanager
    networks:
      - bigdata

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: hadoop-historyserver
    restart: always
    ports:
      - "8188:8188"  # History Server Web UI
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
    depends_on:
      - namenode
    networks:
      - bigdata

  # =========================
  # HIVE ECOSYSTEM
  # =========================
  
  postgres-hive:
    image: postgres:13-alpine
    container_name: hive-metastore-db
    restart: always
    ports:
      - "5433:5432"  # Different port to avoid conflict
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bigdata

  hive-metastore:
    image: apache/hive:3.1.3
    container_name: hive-metastore
    restart: always
    ports:
      - "9083:9083"  # Metastore Thrift
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: postgres
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres-hive:5432/metastore -Djavax.jdo.option.ConnectionUserName=hive -Djavax.jdo.option.ConnectionPassword=hive123"
    depends_on:
      - postgres-hive
      - namenode
    networks:
      - bigdata

  hiveserver2:
    image: apache/hive:3.1.3
    container_name: hive-server2
    restart: always
    ports:
      - "10000:10000"  # HiveServer2 Thrift
      - "10002:10002"  # HiveServer2 Web UI
    environment:
      SERVICE_NAME: hiveserver2
      SERVICE_OPTS: "-Dhive.metastore.uris=thrift://hive-metastore:9083"
      IS_RESUME: "true"
    depends_on:
      - hive-metastore
    networks:
      - bigdata

  # =========================
  # SPARK (Enhanced)
  # =========================
  
  spark-master:
    image: bitnami/spark:3.4.3
    container_name: spark-master
    restart: always
    ports:
      - "8080:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./apps:/workspace
    networks:
      - bigdata

  spark-worker1:
    image: bitnami/spark:3.4.3
    container_name: spark-worker1
    restart: always
    ports:
      - "8081:8081"  # Spark Worker Web UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - bigdata

  spark-worker2:
    image: bitnami/spark:3.4.3
    container_name: spark-worker2
    restart: always
    ports:
      - "8082:8081"  # Spark Worker Web UI (different port)
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - bigdata

  # =========================
  # KAFKA ECOSYSTEM
  # =========================
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - bigdata

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - bigdata

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - bigdata

  # =========================
  # OBJECT STORAGE
  # =========================
  
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"   # MinIO API
      - "9001:9001"   # MinIO Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - bigdata

  # =========================
  # DEVELOPMENT TOOLS
  # =========================
  
  jupyter-bigdata:
    image: jupyter/all-spark-notebook:latest
    container_name: jupyter-bigdata
    restart: always
    ports:
      - "8889:8888"  # Different port from existing Jupyter
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      SPARK_MASTER: "spark://spark-master:7077"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    networks:
      - bigdata

  # =========================
  # WEB UI & MONITORING
  # =========================
  
  hue:
    image: gethue/hue:latest
    container_name: hue
    restart: always
    ports:
      - "8888:8888"  # Hue Web UI
    environment:
      HUE_DATABASE_ENGINE: postgresql_psycopg2
      HUE_DATABASE_HOST: postgres-hive
      HUE_DATABASE_PORT: 5432
      HUE_DATABASE_NAME: metastore
      HUE_DATABASE_USER: hive
      HUE_DATABASE_PASSWORD: hive123
    depends_on:
      - postgres-hive
      - namenode
      - hiveserver2
    networks:
      - bigdata

  # =========================
  # FLINK (Stream Processing)
  # =========================
  
  flink-jobmanager:
    image: flink:1.17-scala_2.12
    container_name: flink-jobmanager
    restart: always
    ports:
      - "8091:8081"  # Flink Web UI
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    command: jobmanager
    networks:
      - bigdata

  flink-taskmanager:
    image: flink:1.17-scala_2.12
    container_name: flink-taskmanager
    restart: always
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    networks:
      - bigdata
